//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to you under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: requests.proto

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for Meta#getCatalogs()
type CatalogsRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CatalogsRequest) Reset() {
	*x = CatalogsRequest{}
	mi := &file_requests_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CatalogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogsRequest) ProtoMessage() {}

func (x *CatalogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CatalogsRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *CatalogsRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

type CatalogsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
}

func (b0 CatalogsRequest_builder) Build() *CatalogsRequest {
	m0 := &CatalogsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	return m0
}

// Request for Meta#getDatabaseProperties()
type DatabasePropertyRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DatabasePropertyRequest) Reset() {
	*x = DatabasePropertyRequest{}
	mi := &file_requests_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabasePropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabasePropertyRequest) ProtoMessage() {}

func (x *DatabasePropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DatabasePropertyRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *DatabasePropertyRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

type DatabasePropertyRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
}

func (b0 DatabasePropertyRequest_builder) Build() *DatabasePropertyRequest {
	m0 := &DatabasePropertyRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	return m0
}

// Request for Meta#getSchemas(String, org.apache.calcite.avatica.Meta.Pat)}
type SchemasRequest struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Catalog          string                 `protobuf:"bytes,1,opt,name=catalog,proto3"`
	xxx_hidden_SchemaPattern    string                 `protobuf:"bytes,2,opt,name=schema_pattern,json=schemaPattern,proto3"`
	xxx_hidden_ConnectionId     string                 `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_HasCatalog       bool                   `protobuf:"varint,4,opt,name=has_catalog,json=hasCatalog,proto3"`
	xxx_hidden_HasSchemaPattern bool                   `protobuf:"varint,5,opt,name=has_schema_pattern,json=hasSchemaPattern,proto3"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *SchemasRequest) Reset() {
	*x = SchemasRequest{}
	mi := &file_requests_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemasRequest) ProtoMessage() {}

func (x *SchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SchemasRequest) GetCatalog() string {
	if x != nil {
		return x.xxx_hidden_Catalog
	}
	return ""
}

func (x *SchemasRequest) GetSchemaPattern() string {
	if x != nil {
		return x.xxx_hidden_SchemaPattern
	}
	return ""
}

func (x *SchemasRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *SchemasRequest) GetHasCatalog() bool {
	if x != nil {
		return x.xxx_hidden_HasCatalog
	}
	return false
}

func (x *SchemasRequest) GetHasSchemaPattern() bool {
	if x != nil {
		return x.xxx_hidden_HasSchemaPattern
	}
	return false
}

func (x *SchemasRequest) SetCatalog(v string) {
	x.xxx_hidden_Catalog = v
}

func (x *SchemasRequest) SetSchemaPattern(v string) {
	x.xxx_hidden_SchemaPattern = v
}

func (x *SchemasRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *SchemasRequest) SetHasCatalog(v bool) {
	x.xxx_hidden_HasCatalog = v
}

func (x *SchemasRequest) SetHasSchemaPattern(v bool) {
	x.xxx_hidden_HasSchemaPattern = v
}

type SchemasRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Catalog          string
	SchemaPattern    string
	ConnectionId     string
	HasCatalog       bool
	HasSchemaPattern bool
}

func (b0 SchemasRequest_builder) Build() *SchemasRequest {
	m0 := &SchemasRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Catalog = b.Catalog
	x.xxx_hidden_SchemaPattern = b.SchemaPattern
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_HasCatalog = b.HasCatalog
	x.xxx_hidden_HasSchemaPattern = b.HasSchemaPattern
	return m0
}

// Request for Request for Meta#getTables(String, org.apache.calcite.avatica.Meta.Pat,
//
//	org.apache.calcite.avatica.Meta.Pat, java.util.List)
type TablesRequest struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Catalog             string                 `protobuf:"bytes,1,opt,name=catalog,proto3"`
	xxx_hidden_SchemaPattern       string                 `protobuf:"bytes,2,opt,name=schema_pattern,json=schemaPattern,proto3"`
	xxx_hidden_TableNamePattern    string                 `protobuf:"bytes,3,opt,name=table_name_pattern,json=tableNamePattern,proto3"`
	xxx_hidden_TypeList            []string               `protobuf:"bytes,4,rep,name=type_list,json=typeList,proto3"`
	xxx_hidden_HasTypeList         bool                   `protobuf:"varint,6,opt,name=has_type_list,json=hasTypeList,proto3"`
	xxx_hidden_ConnectionId        string                 `protobuf:"bytes,7,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_HasCatalog          bool                   `protobuf:"varint,8,opt,name=has_catalog,json=hasCatalog,proto3"`
	xxx_hidden_HasSchemaPattern    bool                   `protobuf:"varint,9,opt,name=has_schema_pattern,json=hasSchemaPattern,proto3"`
	xxx_hidden_HasTableNamePattern bool                   `protobuf:"varint,10,opt,name=has_table_name_pattern,json=hasTableNamePattern,proto3"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *TablesRequest) Reset() {
	*x = TablesRequest{}
	mi := &file_requests_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablesRequest) ProtoMessage() {}

func (x *TablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TablesRequest) GetCatalog() string {
	if x != nil {
		return x.xxx_hidden_Catalog
	}
	return ""
}

func (x *TablesRequest) GetSchemaPattern() string {
	if x != nil {
		return x.xxx_hidden_SchemaPattern
	}
	return ""
}

func (x *TablesRequest) GetTableNamePattern() string {
	if x != nil {
		return x.xxx_hidden_TableNamePattern
	}
	return ""
}

func (x *TablesRequest) GetTypeList() []string {
	if x != nil {
		return x.xxx_hidden_TypeList
	}
	return nil
}

func (x *TablesRequest) GetHasTypeList() bool {
	if x != nil {
		return x.xxx_hidden_HasTypeList
	}
	return false
}

func (x *TablesRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *TablesRequest) GetHasCatalog() bool {
	if x != nil {
		return x.xxx_hidden_HasCatalog
	}
	return false
}

func (x *TablesRequest) GetHasSchemaPattern() bool {
	if x != nil {
		return x.xxx_hidden_HasSchemaPattern
	}
	return false
}

func (x *TablesRequest) GetHasTableNamePattern() bool {
	if x != nil {
		return x.xxx_hidden_HasTableNamePattern
	}
	return false
}

func (x *TablesRequest) SetCatalog(v string) {
	x.xxx_hidden_Catalog = v
}

func (x *TablesRequest) SetSchemaPattern(v string) {
	x.xxx_hidden_SchemaPattern = v
}

func (x *TablesRequest) SetTableNamePattern(v string) {
	x.xxx_hidden_TableNamePattern = v
}

func (x *TablesRequest) SetTypeList(v []string) {
	x.xxx_hidden_TypeList = v
}

func (x *TablesRequest) SetHasTypeList(v bool) {
	x.xxx_hidden_HasTypeList = v
}

func (x *TablesRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *TablesRequest) SetHasCatalog(v bool) {
	x.xxx_hidden_HasCatalog = v
}

func (x *TablesRequest) SetHasSchemaPattern(v bool) {
	x.xxx_hidden_HasSchemaPattern = v
}

func (x *TablesRequest) SetHasTableNamePattern(v bool) {
	x.xxx_hidden_HasTableNamePattern = v
}

type TablesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Catalog             string
	SchemaPattern       string
	TableNamePattern    string
	TypeList            []string
	HasTypeList         bool
	ConnectionId        string
	HasCatalog          bool
	HasSchemaPattern    bool
	HasTableNamePattern bool
}

func (b0 TablesRequest_builder) Build() *TablesRequest {
	m0 := &TablesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Catalog = b.Catalog
	x.xxx_hidden_SchemaPattern = b.SchemaPattern
	x.xxx_hidden_TableNamePattern = b.TableNamePattern
	x.xxx_hidden_TypeList = b.TypeList
	x.xxx_hidden_HasTypeList = b.HasTypeList
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_HasCatalog = b.HasCatalog
	x.xxx_hidden_HasSchemaPattern = b.HasSchemaPattern
	x.xxx_hidden_HasTableNamePattern = b.HasTableNamePattern
	return m0
}

// Request for Meta#getTableTypes()
type TableTypesRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TableTypesRequest) Reset() {
	*x = TableTypesRequest{}
	mi := &file_requests_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableTypesRequest) ProtoMessage() {}

func (x *TableTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TableTypesRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *TableTypesRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

type TableTypesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
}

func (b0 TableTypesRequest_builder) Build() *TableTypesRequest {
	m0 := &TableTypesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	return m0
}

// Request for Meta#getColumns(String, org.apache.calcite.avatica.Meta.Pat,
//
//	org.apache.calcite.avatica.Meta.Pat, org.apache.calcite.avatica.Meta.Pat).
type ColumnsRequest struct {
	state                           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Catalog              string                 `protobuf:"bytes,1,opt,name=catalog,proto3"`
	xxx_hidden_SchemaPattern        string                 `protobuf:"bytes,2,opt,name=schema_pattern,json=schemaPattern,proto3"`
	xxx_hidden_TableNamePattern     string                 `protobuf:"bytes,3,opt,name=table_name_pattern,json=tableNamePattern,proto3"`
	xxx_hidden_ColumnNamePattern    string                 `protobuf:"bytes,4,opt,name=column_name_pattern,json=columnNamePattern,proto3"`
	xxx_hidden_ConnectionId         string                 `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_HasCatalog           bool                   `protobuf:"varint,6,opt,name=has_catalog,json=hasCatalog,proto3"`
	xxx_hidden_HasSchemaPattern     bool                   `protobuf:"varint,7,opt,name=has_schema_pattern,json=hasSchemaPattern,proto3"`
	xxx_hidden_HasTableNamePattern  bool                   `protobuf:"varint,8,opt,name=has_table_name_pattern,json=hasTableNamePattern,proto3"`
	xxx_hidden_HasColumnNamePattern bool                   `protobuf:"varint,9,opt,name=has_column_name_pattern,json=hasColumnNamePattern,proto3"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ColumnsRequest) Reset() {
	*x = ColumnsRequest{}
	mi := &file_requests_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnsRequest) ProtoMessage() {}

func (x *ColumnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ColumnsRequest) GetCatalog() string {
	if x != nil {
		return x.xxx_hidden_Catalog
	}
	return ""
}

func (x *ColumnsRequest) GetSchemaPattern() string {
	if x != nil {
		return x.xxx_hidden_SchemaPattern
	}
	return ""
}

func (x *ColumnsRequest) GetTableNamePattern() string {
	if x != nil {
		return x.xxx_hidden_TableNamePattern
	}
	return ""
}

func (x *ColumnsRequest) GetColumnNamePattern() string {
	if x != nil {
		return x.xxx_hidden_ColumnNamePattern
	}
	return ""
}

func (x *ColumnsRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *ColumnsRequest) GetHasCatalog() bool {
	if x != nil {
		return x.xxx_hidden_HasCatalog
	}
	return false
}

func (x *ColumnsRequest) GetHasSchemaPattern() bool {
	if x != nil {
		return x.xxx_hidden_HasSchemaPattern
	}
	return false
}

func (x *ColumnsRequest) GetHasTableNamePattern() bool {
	if x != nil {
		return x.xxx_hidden_HasTableNamePattern
	}
	return false
}

func (x *ColumnsRequest) GetHasColumnNamePattern() bool {
	if x != nil {
		return x.xxx_hidden_HasColumnNamePattern
	}
	return false
}

func (x *ColumnsRequest) SetCatalog(v string) {
	x.xxx_hidden_Catalog = v
}

func (x *ColumnsRequest) SetSchemaPattern(v string) {
	x.xxx_hidden_SchemaPattern = v
}

func (x *ColumnsRequest) SetTableNamePattern(v string) {
	x.xxx_hidden_TableNamePattern = v
}

func (x *ColumnsRequest) SetColumnNamePattern(v string) {
	x.xxx_hidden_ColumnNamePattern = v
}

func (x *ColumnsRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *ColumnsRequest) SetHasCatalog(v bool) {
	x.xxx_hidden_HasCatalog = v
}

func (x *ColumnsRequest) SetHasSchemaPattern(v bool) {
	x.xxx_hidden_HasSchemaPattern = v
}

func (x *ColumnsRequest) SetHasTableNamePattern(v bool) {
	x.xxx_hidden_HasTableNamePattern = v
}

func (x *ColumnsRequest) SetHasColumnNamePattern(v bool) {
	x.xxx_hidden_HasColumnNamePattern = v
}

type ColumnsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Catalog              string
	SchemaPattern        string
	TableNamePattern     string
	ColumnNamePattern    string
	ConnectionId         string
	HasCatalog           bool
	HasSchemaPattern     bool
	HasTableNamePattern  bool
	HasColumnNamePattern bool
}

func (b0 ColumnsRequest_builder) Build() *ColumnsRequest {
	m0 := &ColumnsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Catalog = b.Catalog
	x.xxx_hidden_SchemaPattern = b.SchemaPattern
	x.xxx_hidden_TableNamePattern = b.TableNamePattern
	x.xxx_hidden_ColumnNamePattern = b.ColumnNamePattern
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_HasCatalog = b.HasCatalog
	x.xxx_hidden_HasSchemaPattern = b.HasSchemaPattern
	x.xxx_hidden_HasTableNamePattern = b.HasTableNamePattern
	x.xxx_hidden_HasColumnNamePattern = b.HasColumnNamePattern
	return m0
}

// Request for Meta#getTypeInfo()
type TypeInfoRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TypeInfoRequest) Reset() {
	*x = TypeInfoRequest{}
	mi := &file_requests_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeInfoRequest) ProtoMessage() {}

func (x *TypeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TypeInfoRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *TypeInfoRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

type TypeInfoRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
}

func (b0 TypeInfoRequest_builder) Build() *TypeInfoRequest {
	m0 := &TypeInfoRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	return m0
}

// Request for Meta#prepareAndExecute(Meta.StatementHandle, String, long, Meta.PrepareCallback)
type PrepareAndExecuteRequest struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId      string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_Sql               string                 `protobuf:"bytes,2,opt,name=sql,proto3"`
	xxx_hidden_MaxRowCount       uint64                 `protobuf:"varint,3,opt,name=max_row_count,json=maxRowCount,proto3"`
	xxx_hidden_StatementId       uint32                 `protobuf:"varint,4,opt,name=statement_id,json=statementId,proto3"`
	xxx_hidden_MaxRowsTotal      int64                  `protobuf:"varint,5,opt,name=max_rows_total,json=maxRowsTotal,proto3"`
	xxx_hidden_FirstFrameMaxSize int32                  `protobuf:"varint,6,opt,name=first_frame_max_size,json=firstFrameMaxSize,proto3"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *PrepareAndExecuteRequest) Reset() {
	*x = PrepareAndExecuteRequest{}
	mi := &file_requests_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareAndExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareAndExecuteRequest) ProtoMessage() {}

func (x *PrepareAndExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PrepareAndExecuteRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *PrepareAndExecuteRequest) GetSql() string {
	if x != nil {
		return x.xxx_hidden_Sql
	}
	return ""
}

func (x *PrepareAndExecuteRequest) GetMaxRowCount() uint64 {
	if x != nil {
		return x.xxx_hidden_MaxRowCount
	}
	return 0
}

func (x *PrepareAndExecuteRequest) GetStatementId() uint32 {
	if x != nil {
		return x.xxx_hidden_StatementId
	}
	return 0
}

func (x *PrepareAndExecuteRequest) GetMaxRowsTotal() int64 {
	if x != nil {
		return x.xxx_hidden_MaxRowsTotal
	}
	return 0
}

func (x *PrepareAndExecuteRequest) GetFirstFrameMaxSize() int32 {
	if x != nil {
		return x.xxx_hidden_FirstFrameMaxSize
	}
	return 0
}

func (x *PrepareAndExecuteRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *PrepareAndExecuteRequest) SetSql(v string) {
	x.xxx_hidden_Sql = v
}

func (x *PrepareAndExecuteRequest) SetMaxRowCount(v uint64) {
	x.xxx_hidden_MaxRowCount = v
}

func (x *PrepareAndExecuteRequest) SetStatementId(v uint32) {
	x.xxx_hidden_StatementId = v
}

func (x *PrepareAndExecuteRequest) SetMaxRowsTotal(v int64) {
	x.xxx_hidden_MaxRowsTotal = v
}

func (x *PrepareAndExecuteRequest) SetFirstFrameMaxSize(v int32) {
	x.xxx_hidden_FirstFrameMaxSize = v
}

type PrepareAndExecuteRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId      string
	Sql               string
	MaxRowCount       uint64
	StatementId       uint32
	MaxRowsTotal      int64
	FirstFrameMaxSize int32
}

func (b0 PrepareAndExecuteRequest_builder) Build() *PrepareAndExecuteRequest {
	m0 := &PrepareAndExecuteRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_Sql = b.Sql
	x.xxx_hidden_MaxRowCount = b.MaxRowCount
	x.xxx_hidden_StatementId = b.StatementId
	x.xxx_hidden_MaxRowsTotal = b.MaxRowsTotal
	x.xxx_hidden_FirstFrameMaxSize = b.FirstFrameMaxSize
	return m0
}

// Request for Meta.prepare(Meta.ConnectionHandle, String, long)
type PrepareRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_Sql          string                 `protobuf:"bytes,2,opt,name=sql,proto3"`
	xxx_hidden_MaxRowCount  uint64                 `protobuf:"varint,3,opt,name=max_row_count,json=maxRowCount,proto3"`
	xxx_hidden_MaxRowsTotal int64                  `protobuf:"varint,4,opt,name=max_rows_total,json=maxRowsTotal,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PrepareRequest) Reset() {
	*x = PrepareRequest{}
	mi := &file_requests_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRequest) ProtoMessage() {}

func (x *PrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PrepareRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *PrepareRequest) GetSql() string {
	if x != nil {
		return x.xxx_hidden_Sql
	}
	return ""
}

func (x *PrepareRequest) GetMaxRowCount() uint64 {
	if x != nil {
		return x.xxx_hidden_MaxRowCount
	}
	return 0
}

func (x *PrepareRequest) GetMaxRowsTotal() int64 {
	if x != nil {
		return x.xxx_hidden_MaxRowsTotal
	}
	return 0
}

func (x *PrepareRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *PrepareRequest) SetSql(v string) {
	x.xxx_hidden_Sql = v
}

func (x *PrepareRequest) SetMaxRowCount(v uint64) {
	x.xxx_hidden_MaxRowCount = v
}

func (x *PrepareRequest) SetMaxRowsTotal(v int64) {
	x.xxx_hidden_MaxRowsTotal = v
}

type PrepareRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
	Sql          string
	MaxRowCount  uint64
	MaxRowsTotal int64
}

func (b0 PrepareRequest_builder) Build() *PrepareRequest {
	m0 := &PrepareRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_Sql = b.Sql
	x.xxx_hidden_MaxRowCount = b.MaxRowCount
	x.xxx_hidden_MaxRowsTotal = b.MaxRowsTotal
	return m0
}

// Request for Meta#fetch(Meta.StatementHandle, List, long, int)
type FetchRequest struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId     string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_StatementId      uint32                 `protobuf:"varint,2,opt,name=statement_id,json=statementId,proto3"`
	xxx_hidden_Offset           uint64                 `protobuf:"varint,3,opt,name=offset,proto3"`
	xxx_hidden_FetchMaxRowCount uint32                 `protobuf:"varint,4,opt,name=fetch_max_row_count,json=fetchMaxRowCount,proto3"`
	xxx_hidden_FrameMaxSize     int32                  `protobuf:"varint,5,opt,name=frame_max_size,json=frameMaxSize,proto3"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *FetchRequest) Reset() {
	*x = FetchRequest{}
	mi := &file_requests_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRequest) ProtoMessage() {}

func (x *FetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FetchRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *FetchRequest) GetStatementId() uint32 {
	if x != nil {
		return x.xxx_hidden_StatementId
	}
	return 0
}

func (x *FetchRequest) GetOffset() uint64 {
	if x != nil {
		return x.xxx_hidden_Offset
	}
	return 0
}

func (x *FetchRequest) GetFetchMaxRowCount() uint32 {
	if x != nil {
		return x.xxx_hidden_FetchMaxRowCount
	}
	return 0
}

func (x *FetchRequest) GetFrameMaxSize() int32 {
	if x != nil {
		return x.xxx_hidden_FrameMaxSize
	}
	return 0
}

func (x *FetchRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *FetchRequest) SetStatementId(v uint32) {
	x.xxx_hidden_StatementId = v
}

func (x *FetchRequest) SetOffset(v uint64) {
	x.xxx_hidden_Offset = v
}

func (x *FetchRequest) SetFetchMaxRowCount(v uint32) {
	x.xxx_hidden_FetchMaxRowCount = v
}

func (x *FetchRequest) SetFrameMaxSize(v int32) {
	x.xxx_hidden_FrameMaxSize = v
}

type FetchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId     string
	StatementId      uint32
	Offset           uint64
	FetchMaxRowCount uint32
	FrameMaxSize     int32
}

func (b0 FetchRequest_builder) Build() *FetchRequest {
	m0 := &FetchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_StatementId = b.StatementId
	x.xxx_hidden_Offset = b.Offset
	x.xxx_hidden_FetchMaxRowCount = b.FetchMaxRowCount
	x.xxx_hidden_FrameMaxSize = b.FrameMaxSize
	return m0
}

// Request for Meta#createStatement(Meta.ConnectionHandle)
type CreateStatementRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CreateStatementRequest) Reset() {
	*x = CreateStatementRequest{}
	mi := &file_requests_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStatementRequest) ProtoMessage() {}

func (x *CreateStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateStatementRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *CreateStatementRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

type CreateStatementRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
}

func (b0 CreateStatementRequest_builder) Build() *CreateStatementRequest {
	m0 := &CreateStatementRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	return m0
}

// Request for Meta#closeStatement(Meta.StatementHandle)
type CloseStatementRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_StatementId  uint32                 `protobuf:"varint,2,opt,name=statement_id,json=statementId,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CloseStatementRequest) Reset() {
	*x = CloseStatementRequest{}
	mi := &file_requests_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseStatementRequest) ProtoMessage() {}

func (x *CloseStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CloseStatementRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *CloseStatementRequest) GetStatementId() uint32 {
	if x != nil {
		return x.xxx_hidden_StatementId
	}
	return 0
}

func (x *CloseStatementRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *CloseStatementRequest) SetStatementId(v uint32) {
	x.xxx_hidden_StatementId = v
}

type CloseStatementRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
	StatementId  uint32
}

func (b0 CloseStatementRequest_builder) Build() *CloseStatementRequest {
	m0 := &CloseStatementRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_StatementId = b.StatementId
	return m0
}

// Request for Meta#openConnection(Meta.ConnectionHandle, Map<String, String>)
type OpenConnectionRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_Info         map[string]string      `protobuf:"bytes,2,rep,name=info,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *OpenConnectionRequest) Reset() {
	*x = OpenConnectionRequest{}
	mi := &file_requests_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenConnectionRequest) ProtoMessage() {}

func (x *OpenConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OpenConnectionRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *OpenConnectionRequest) GetInfo() map[string]string {
	if x != nil {
		return x.xxx_hidden_Info
	}
	return nil
}

func (x *OpenConnectionRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *OpenConnectionRequest) SetInfo(v map[string]string) {
	x.xxx_hidden_Info = v
}

type OpenConnectionRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
	Info         map[string]string
}

func (b0 OpenConnectionRequest_builder) Build() *OpenConnectionRequest {
	m0 := &OpenConnectionRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_Info = b.Info
	return m0
}

// Request for Meta#closeConnection(Meta.ConnectionHandle)
type CloseConnectionRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CloseConnectionRequest) Reset() {
	*x = CloseConnectionRequest{}
	mi := &file_requests_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseConnectionRequest) ProtoMessage() {}

func (x *CloseConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CloseConnectionRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *CloseConnectionRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

type CloseConnectionRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
}

func (b0 CloseConnectionRequest_builder) Build() *CloseConnectionRequest {
	m0 := &CloseConnectionRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	return m0
}

type ConnectionSyncRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_ConnProps    *ConnectionProperties  `protobuf:"bytes,2,opt,name=conn_props,json=connProps,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ConnectionSyncRequest) Reset() {
	*x = ConnectionSyncRequest{}
	mi := &file_requests_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionSyncRequest) ProtoMessage() {}

func (x *ConnectionSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConnectionSyncRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *ConnectionSyncRequest) GetConnProps() *ConnectionProperties {
	if x != nil {
		return x.xxx_hidden_ConnProps
	}
	return nil
}

func (x *ConnectionSyncRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *ConnectionSyncRequest) SetConnProps(v *ConnectionProperties) {
	x.xxx_hidden_ConnProps = v
}

func (x *ConnectionSyncRequest) HasConnProps() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ConnProps != nil
}

func (x *ConnectionSyncRequest) ClearConnProps() {
	x.xxx_hidden_ConnProps = nil
}

type ConnectionSyncRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
	ConnProps    *ConnectionProperties
}

func (b0 ConnectionSyncRequest_builder) Build() *ConnectionSyncRequest {
	m0 := &ConnectionSyncRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_ConnProps = b.ConnProps
	return m0
}

// Request for Meta#execute(Meta.ConnectionHandle, list, long)
type ExecuteRequest struct {
	state                                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_StatementHandle             *StatementHandle       `protobuf:"bytes,1,opt,name=statementHandle,proto3"`
	xxx_hidden_ParameterValues             *[]*TypedValue         `protobuf:"bytes,2,rep,name=parameter_values,json=parameterValues,proto3"`
	xxx_hidden_DeprecatedFirstFrameMaxSize uint64                 `protobuf:"varint,3,opt,name=deprecated_first_frame_max_size,json=deprecatedFirstFrameMaxSize,proto3"`
	xxx_hidden_HasParameterValues          bool                   `protobuf:"varint,4,opt,name=has_parameter_values,json=hasParameterValues,proto3"`
	xxx_hidden_FirstFrameMaxSize           int32                  `protobuf:"varint,5,opt,name=first_frame_max_size,json=firstFrameMaxSize,proto3"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	mi := &file_requests_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExecuteRequest) GetStatementHandle() *StatementHandle {
	if x != nil {
		return x.xxx_hidden_StatementHandle
	}
	return nil
}

func (x *ExecuteRequest) GetParameterValues() []*TypedValue {
	if x != nil {
		if x.xxx_hidden_ParameterValues != nil {
			return *x.xxx_hidden_ParameterValues
		}
	}
	return nil
}

func (x *ExecuteRequest) GetDeprecatedFirstFrameMaxSize() uint64 {
	if x != nil {
		return x.xxx_hidden_DeprecatedFirstFrameMaxSize
	}
	return 0
}

func (x *ExecuteRequest) GetHasParameterValues() bool {
	if x != nil {
		return x.xxx_hidden_HasParameterValues
	}
	return false
}

func (x *ExecuteRequest) GetFirstFrameMaxSize() int32 {
	if x != nil {
		return x.xxx_hidden_FirstFrameMaxSize
	}
	return 0
}

func (x *ExecuteRequest) SetStatementHandle(v *StatementHandle) {
	x.xxx_hidden_StatementHandle = v
}

func (x *ExecuteRequest) SetParameterValues(v []*TypedValue) {
	x.xxx_hidden_ParameterValues = &v
}

func (x *ExecuteRequest) SetDeprecatedFirstFrameMaxSize(v uint64) {
	x.xxx_hidden_DeprecatedFirstFrameMaxSize = v
}

func (x *ExecuteRequest) SetHasParameterValues(v bool) {
	x.xxx_hidden_HasParameterValues = v
}

func (x *ExecuteRequest) SetFirstFrameMaxSize(v int32) {
	x.xxx_hidden_FirstFrameMaxSize = v
}

func (x *ExecuteRequest) HasStatementHandle() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StatementHandle != nil
}

func (x *ExecuteRequest) ClearStatementHandle() {
	x.xxx_hidden_StatementHandle = nil
}

type ExecuteRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	StatementHandle             *StatementHandle
	ParameterValues             []*TypedValue
	DeprecatedFirstFrameMaxSize uint64
	HasParameterValues          bool
	FirstFrameMaxSize           int32
}

func (b0 ExecuteRequest_builder) Build() *ExecuteRequest {
	m0 := &ExecuteRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_StatementHandle = b.StatementHandle
	x.xxx_hidden_ParameterValues = &b.ParameterValues
	x.xxx_hidden_DeprecatedFirstFrameMaxSize = b.DeprecatedFirstFrameMaxSize
	x.xxx_hidden_HasParameterValues = b.HasParameterValues
	x.xxx_hidden_FirstFrameMaxSize = b.FirstFrameMaxSize
	return m0
}

type SyncResultsRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_StatementId  uint32                 `protobuf:"varint,2,opt,name=statement_id,json=statementId,proto3"`
	xxx_hidden_State        *QueryState            `protobuf:"bytes,3,opt,name=state,proto3"`
	xxx_hidden_Offset       uint64                 `protobuf:"varint,4,opt,name=offset,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SyncResultsRequest) Reset() {
	*x = SyncResultsRequest{}
	mi := &file_requests_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResultsRequest) ProtoMessage() {}

func (x *SyncResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SyncResultsRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *SyncResultsRequest) GetStatementId() uint32 {
	if x != nil {
		return x.xxx_hidden_StatementId
	}
	return 0
}

func (x *SyncResultsRequest) GetState() *QueryState {
	if x != nil {
		return x.xxx_hidden_State
	}
	return nil
}

func (x *SyncResultsRequest) GetOffset() uint64 {
	if x != nil {
		return x.xxx_hidden_Offset
	}
	return 0
}

func (x *SyncResultsRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *SyncResultsRequest) SetStatementId(v uint32) {
	x.xxx_hidden_StatementId = v
}

func (x *SyncResultsRequest) SetState(v *QueryState) {
	x.xxx_hidden_State = v
}

func (x *SyncResultsRequest) SetOffset(v uint64) {
	x.xxx_hidden_Offset = v
}

func (x *SyncResultsRequest) HasState() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_State != nil
}

func (x *SyncResultsRequest) ClearState() {
	x.xxx_hidden_State = nil
}

type SyncResultsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
	StatementId  uint32
	State        *QueryState
	Offset       uint64
}

func (b0 SyncResultsRequest_builder) Build() *SyncResultsRequest {
	m0 := &SyncResultsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_StatementId = b.StatementId
	x.xxx_hidden_State = b.State
	x.xxx_hidden_Offset = b.Offset
	return m0
}

// Request to invoke a commit on a Connection
type CommitRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	mi := &file_requests_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CommitRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *CommitRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

type CommitRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
}

func (b0 CommitRequest_builder) Build() *CommitRequest {
	m0 := &CommitRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	return m0
}

// Request to invoke rollback on a Connection
type RollbackRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *RollbackRequest) Reset() {
	*x = RollbackRequest{}
	mi := &file_requests_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackRequest) ProtoMessage() {}

func (x *RollbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RollbackRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *RollbackRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

type RollbackRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
}

func (b0 RollbackRequest_builder) Build() *RollbackRequest {
	m0 := &RollbackRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	return m0
}

// Request to prepare and execute a collection of sql statements.
type PrepareAndExecuteBatchRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_StatementId  uint32                 `protobuf:"varint,2,opt,name=statement_id,json=statementId,proto3"`
	xxx_hidden_SqlCommands  []string               `protobuf:"bytes,3,rep,name=sql_commands,json=sqlCommands,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PrepareAndExecuteBatchRequest) Reset() {
	*x = PrepareAndExecuteBatchRequest{}
	mi := &file_requests_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareAndExecuteBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareAndExecuteBatchRequest) ProtoMessage() {}

func (x *PrepareAndExecuteBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PrepareAndExecuteBatchRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *PrepareAndExecuteBatchRequest) GetStatementId() uint32 {
	if x != nil {
		return x.xxx_hidden_StatementId
	}
	return 0
}

func (x *PrepareAndExecuteBatchRequest) GetSqlCommands() []string {
	if x != nil {
		return x.xxx_hidden_SqlCommands
	}
	return nil
}

func (x *PrepareAndExecuteBatchRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *PrepareAndExecuteBatchRequest) SetStatementId(v uint32) {
	x.xxx_hidden_StatementId = v
}

func (x *PrepareAndExecuteBatchRequest) SetSqlCommands(v []string) {
	x.xxx_hidden_SqlCommands = v
}

type PrepareAndExecuteBatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
	StatementId  uint32
	SqlCommands  []string
}

func (b0 PrepareAndExecuteBatchRequest_builder) Build() *PrepareAndExecuteBatchRequest {
	m0 := &PrepareAndExecuteBatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_StatementId = b.StatementId
	x.xxx_hidden_SqlCommands = b.SqlCommands
	return m0
}

// Each command is a list of TypedValues
type UpdateBatch struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ParameterValues *[]*TypedValue         `protobuf:"bytes,1,rep,name=parameter_values,json=parameterValues,proto3"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UpdateBatch) Reset() {
	*x = UpdateBatch{}
	mi := &file_requests_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBatch) ProtoMessage() {}

func (x *UpdateBatch) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateBatch) GetParameterValues() []*TypedValue {
	if x != nil {
		if x.xxx_hidden_ParameterValues != nil {
			return *x.xxx_hidden_ParameterValues
		}
	}
	return nil
}

func (x *UpdateBatch) SetParameterValues(v []*TypedValue) {
	x.xxx_hidden_ParameterValues = &v
}

type UpdateBatch_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ParameterValues []*TypedValue
}

func (b0 UpdateBatch_builder) Build() *UpdateBatch {
	m0 := &UpdateBatch{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ParameterValues = &b.ParameterValues
	return m0
}

type ExecuteBatchRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3"`
	xxx_hidden_StatementId  uint32                 `protobuf:"varint,2,opt,name=statement_id,json=statementId,proto3"`
	xxx_hidden_Updates      *[]*UpdateBatch        `protobuf:"bytes,3,rep,name=updates,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ExecuteBatchRequest) Reset() {
	*x = ExecuteBatchRequest{}
	mi := &file_requests_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteBatchRequest) ProtoMessage() {}

func (x *ExecuteBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requests_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExecuteBatchRequest) GetConnectionId() string {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return ""
}

func (x *ExecuteBatchRequest) GetStatementId() uint32 {
	if x != nil {
		return x.xxx_hidden_StatementId
	}
	return 0
}

func (x *ExecuteBatchRequest) GetUpdates() []*UpdateBatch {
	if x != nil {
		if x.xxx_hidden_Updates != nil {
			return *x.xxx_hidden_Updates
		}
	}
	return nil
}

func (x *ExecuteBatchRequest) SetConnectionId(v string) {
	x.xxx_hidden_ConnectionId = v
}

func (x *ExecuteBatchRequest) SetStatementId(v uint32) {
	x.xxx_hidden_StatementId = v
}

func (x *ExecuteBatchRequest) SetUpdates(v []*UpdateBatch) {
	x.xxx_hidden_Updates = &v
}

type ExecuteBatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionId string
	StatementId  uint32
	Updates      []*UpdateBatch
}

func (b0 ExecuteBatchRequest_builder) Build() *ExecuteBatchRequest {
	m0 := &ExecuteBatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_StatementId = b.StatementId
	x.xxx_hidden_Updates = &b.Updates
	return m0
}

var File_requests_proto protoreflect.FileDescriptor

var file_requests_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36,
	0x0a, 0x0f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0xe8,
	0x02, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x68, 0x61, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x38, 0x0a, 0x11, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x8f, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61,
	0x73, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x68, 0x61, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x68,
	0x61, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x61, 0x73,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x35,
	0x0a, 0x17, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x36, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xef, 0x01,
	0x0a, 0x18, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f,
	0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x91, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xc3, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3d, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x37,
	0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x0e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x1f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x34, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x0f, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6e,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22,
	0x45, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x36,
	0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x22,
	0x0a, 0x20, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x63, 0x61, 0x6c,
	0x63, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_requests_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_requests_proto_goTypes = []any{
	(*CatalogsRequest)(nil),               // 0: CatalogsRequest
	(*DatabasePropertyRequest)(nil),       // 1: DatabasePropertyRequest
	(*SchemasRequest)(nil),                // 2: SchemasRequest
	(*TablesRequest)(nil),                 // 3: TablesRequest
	(*TableTypesRequest)(nil),             // 4: TableTypesRequest
	(*ColumnsRequest)(nil),                // 5: ColumnsRequest
	(*TypeInfoRequest)(nil),               // 6: TypeInfoRequest
	(*PrepareAndExecuteRequest)(nil),      // 7: PrepareAndExecuteRequest
	(*PrepareRequest)(nil),                // 8: PrepareRequest
	(*FetchRequest)(nil),                  // 9: FetchRequest
	(*CreateStatementRequest)(nil),        // 10: CreateStatementRequest
	(*CloseStatementRequest)(nil),         // 11: CloseStatementRequest
	(*OpenConnectionRequest)(nil),         // 12: OpenConnectionRequest
	(*CloseConnectionRequest)(nil),        // 13: CloseConnectionRequest
	(*ConnectionSyncRequest)(nil),         // 14: ConnectionSyncRequest
	(*ExecuteRequest)(nil),                // 15: ExecuteRequest
	(*SyncResultsRequest)(nil),            // 16: SyncResultsRequest
	(*CommitRequest)(nil),                 // 17: CommitRequest
	(*RollbackRequest)(nil),               // 18: RollbackRequest
	(*PrepareAndExecuteBatchRequest)(nil), // 19: PrepareAndExecuteBatchRequest
	(*UpdateBatch)(nil),                   // 20: UpdateBatch
	(*ExecuteBatchRequest)(nil),           // 21: ExecuteBatchRequest
	nil,                                   // 22: OpenConnectionRequest.InfoEntry
	(*ConnectionProperties)(nil),          // 23: ConnectionProperties
	(*StatementHandle)(nil),               // 24: StatementHandle
	(*TypedValue)(nil),                    // 25: TypedValue
	(*QueryState)(nil),                    // 26: QueryState
}
var file_requests_proto_depIdxs = []int32{
	22, // 0: OpenConnectionRequest.info:type_name -> OpenConnectionRequest.InfoEntry
	23, // 1: ConnectionSyncRequest.conn_props:type_name -> ConnectionProperties
	24, // 2: ExecuteRequest.statementHandle:type_name -> StatementHandle
	25, // 3: ExecuteRequest.parameter_values:type_name -> TypedValue
	26, // 4: SyncResultsRequest.state:type_name -> QueryState
	25, // 5: UpdateBatch.parameter_values:type_name -> TypedValue
	20, // 6: ExecuteBatchRequest.updates:type_name -> UpdateBatch
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_requests_proto_init() }
func file_requests_proto_init() {
	if File_requests_proto != nil {
		return
	}
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_requests_proto_rawDesc), len(file_requests_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_requests_proto_goTypes,
		DependencyIndexes: file_requests_proto_depIdxs,
		MessageInfos:      file_requests_proto_msgTypes,
	}.Build()
	File_requests_proto = out.File
	file_requests_proto_goTypes = nil
	file_requests_proto_depIdxs = nil
}
